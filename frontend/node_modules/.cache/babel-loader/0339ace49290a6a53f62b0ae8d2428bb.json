{"ast":null,"code":"import cuid from \"cuid\";\nexport const cuidFn = cuid;\nconst initialState = {\n  videos: [],\n  questions: [],\n  answers: []\n};\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"SET_VIDEOS\":\n      return { ...state,\n        videos: action.payload.videos\n      };\n\n    case \"ADD_QUESTION\":\n      const question = {\n        text: action.text,\n        id: cuidFn()\n      };\n      return { ...state,\n        questions: [...state.questions, question]\n      };\n\n    case \"DELETE_QUESTION\":\n      const questions = state.questions.filter(question => question.id !== action.id);\n      return { ...state,\n        questions\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};","map":{"version":3,"sources":["/home/andy_atari/short-film-festival-app/frontend/src/redux/reducer.js"],"names":["cuid","cuidFn","initialState","videos","questions","answers","reducer","state","action","type","payload","question","text","id","filter"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,MAAMC,MAAM,GAAGD,IAAf;AAEP,MAAME,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,SAAS,EAAE,EAFQ;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB;AAMA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,YAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYJ,QAAAA,MAAM,EAAEK,MAAM,CAACE,OAAP,CAAeP;AAAnC,OAAP;;AACF,SAAK,cAAL;AACE,YAAMQ,QAAQ,GAAG;AAAEC,QAAAA,IAAI,EAAEJ,MAAM,CAACI,IAAf;AAAqBC,QAAAA,EAAE,EAAEZ,MAAM;AAA/B,OAAjB;AACA,aAAO,EACL,GAAGM,KADE;AAELH,QAAAA,SAAS,EAAE,CAAC,GAAGG,KAAK,CAACH,SAAV,EAAqBO,QAArB;AAFN,OAAP;;AAIF,SAAK,iBAAL;AACE,YAAMP,SAAS,GAAGG,KAAK,CAACH,SAAN,CAAgBU,MAAhB,CACfH,QAAD,IAAcA,QAAQ,CAACE,EAAT,KAAgBL,MAAM,CAACK,EADrB,CAAlB;AAGA,aAAO,EAAE,GAAGN,KAAL;AAAYH,QAAAA;AAAZ,OAAP;;AAEF;AACE,aAAO,EAAE,GAAGG;AAAL,OAAP;AAhBJ;AAkBD,CAnBM","sourcesContent":["import cuid from \"cuid\";\nexport const cuidFn = cuid;\n\nconst initialState = {\n  videos: [],\n  questions: [],\n  answers: [],\n};\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"SET_VIDEOS\":\n      return { ...state, videos: action.payload.videos };\n    case \"ADD_QUESTION\":\n      const question = { text: action.text, id: cuidFn() };\n      return {\n        ...state,\n        questions: [...state.questions, question],\n      };\n    case \"DELETE_QUESTION\":\n      const questions = state.questions.filter(\n        (question) => question.id !== action.id\n      );\n      return { ...state, questions };\n\n    default:\n      return { ...state };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}